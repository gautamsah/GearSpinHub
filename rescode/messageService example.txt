                                                                                                                                                            Sender

<template>
    <div class="sender-container">
        <lightning-button label="Send Data" onclick={sendData}></lightning-button>
    </div>
</template>



import { LightningElement,wire } from 'lwc';
import { publish, MessageContext } from 'lightning/messageService';
// import { publish,subscribe,unsubscribe,createMessageContext,releaseMessageContext } from 'lightning/messageService';
import DATA_MESSAGE_CHANNEL from '@salesforce/messageChannel/MyMessageChannel__c';

export default class TestComp extends LightningElement {
    @wire(MessageContext)
    messageContext;

    sendData() {
        const jsonData = {
            key1: 'value1',
            key2: 'value2',
            key3: 'value3'
        };

        const messagePayload = { data: JSON.stringify(jsonData) };
        publish(this.messageContext, DATA_MESSAGE_CHANNEL, messagePayload);
    }
}





                                                                                                                                                            Reciever






<template>
    <div class="receiver-container">
        <p>Data received: {jsonDataString}</p>
    </div>
</template>






import { LightningElement, wire } from 'lwc';
import { subscribe, MessageContext } from 'lightning/messageService';
import DATA_MESSAGE_CHANNEL from '@salesforce/messageChannel/MyMessageChannel__c';

export default class GshRelatedProducts extends LightningElement {
    @wire(MessageContext)
    messageContext;

    receivedData;
    subscription;
    
    jsonDataString;
    connectedCallback() {
        this.subscribeToDataChannel();
    }

    subscribeToDataChannel() {
        this.subscription = subscribe(
            this.messageContext,
            DATA_MESSAGE_CHANNEL,
            (message) => {
                this.handleMessage(message);
            }
        );
    }

    handleMessage(message) {
        this.jsonDataString = message.data;
        console.log(jsonDataString);
        this.receivedData = JSON.parse(jsonDataString); // Convert the string back to JSON object
        console.log(this.receivedData);
    }

    disconnectedCallback() {
        unsubscribe(this.subscription);
        this.subscription = null;
        console.log('unsubscribed ',this.subscription);
    }
}