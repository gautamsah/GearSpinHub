connectedCallback(){
        if (this.allCustomerReviews) {
            // If allCustomerReviews is already available, directly call the formatDateFunc
            this.formatDateFunc();
        } else {
            // If allCustomerReviews is not available yet, create a promise
            const promise = new Promise((resolve, reject) => {
                const interval = setInterval(() => {
                    if (this.allCustomerReviews) {
                        clearInterval(interval);
                        resolve();
                    }
                }, 100); // Check every 100 milliseconds if allCustomerReviews is available
            });
    
            // Once the promise is resolved (i.e., allCustomerReviews is available), call formatDateFunc
            promise.then(() => {
                this.formatDateFunc();
            });
        }
    }
    formatDateFunc() {
        this.allCustomerReviews = this.allCustomerReviews.map(review => {
            if (review.Rating_Date__c) {
                const parts = review.Rating_Date__c.split('-');
                const formattedDate = `${parts[2]}-${parts[1]}-${parts[0]}`;
                review.formattedDate = formattedDate;
                console.log(formattedDate);
                console.log(JSON.stringify(formattedDate));
                console.log(JSON.stringify(review.formattedDate));
            }
            return review;
        });
    }